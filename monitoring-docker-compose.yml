version: '3.7'

services:

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VESRION}
    container_name: monitoring.prometheus
    volumes:
      - ${PWD}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${PWD}/prometheus/alert.rules:/etc/prometheus/alert.rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=14d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.max-block-duration=1h'
      - '--storage.tsdb.wal-segment-size=20MB'
      - '--storage.tsdb.allow-overlapping-blocks'
      - '--query.max-samples=5000000'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: monitoring.nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    container_name: monitoring.cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    restart: unless-stopped
    command:
      - '--storage_duration=15s'
    expose:
      - 8080
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    build:
      context: ${PWD}/grafana
      args:
        - NGINX_GRAFANA_HOST=${NGINX_GRAFANA_HOST}
        - GRAFANA_VERSION=${GRAFANA_VERSION}
    container_name: monitoring.grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ${PWD}/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - VIRTUAL_HOST=grafana.develop.lebedev-studio.com
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - "3000:3000"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  promtail:
    image: grafana/promtail:${LOKI_VERSION}
    container_name: monitoring.promtail
    expose:
      - 9080
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail-data:/var/lib/promtail/postions
      - ${PWD}/prober/logs:/var/log/nginx
      - ${PWD}/promtail/docker.yml:/etc/promtail/promtail.yml
    command:
      - '-config.file=/etc/promtail/promtail.yml'
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  loki:
    container_name: monitoring.loki
    image: grafana/loki:${LOKI_VERSION}
    expose:
      - 3100
    volumes:
      - ${PWD}/loki/loki-config.yml:/etc/loki-config.yml
      - loki-data:/tmp/loki/
    command: -config.file=/etc/loki-config.yml
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    container_name: monitoring.alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/tmp/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  lebotic:
    container_name: monitoring.lebotic
    build: ./lebotic
    restart: unless-stopped
    environment:
      - LEBOTIC_TELEGRAM_CHAT_ID=${LEBOTIC_TELEGRAM_CHAT_ID}
      - LEBOTIC_TELEGRAM_TOKEN=${LEBOTIC_TELEGRAM_TOKEN}
    ports:
      - "8619:8619"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

networks:
  monitoring.network:
    ipam:
      driver: default

volumes:
  prometheus-data: {}
  grafana-data: {}
  loki-data: {}
  promtail-data: {}